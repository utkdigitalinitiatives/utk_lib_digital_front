@mixin background-opacity($color, $opacity: 0.3) {
  background: $color; /* The Fallback */
  background: rgba($color, $opacity);
}

@mixin filter-gradient($start, $start-percent, $end, $end-percent) {
  background: -moz-linear-gradient(top, $start $start-percent, $end $end-percent);
  background: -webkit-gradient(linear, top, bottom, color-stop($start-percent, $start), color-stop($end-percent, $end));
  background: -webkit-linear-gradient(top, $start $start-percent, $end $end-percent);
  background: -o-linear-gradient(top, $start $start-percent, $end $end-percent);
  background: -ms-linear-gradient(top, $start $start-percent, $end $end-percent);
  background: linear-gradient(to bottom, $start $start-percent, $end $end-percent);
}

@mixin filter-gradient-horizontal($start, $start-percent, $end, $end-percent) {
  background: -moz-linear-gradient(left, $start $start-percent, $end $end-percent);
  background: -webkit-gradient(linear, left, bottom, color-stop($start-percent, $start), color-stop($end-percent, $end));
  background: -webkit-linear-gradient(left, $start $start-percent, $end $end-percent);
  background: -o-linear-gradient(left, $start $start-percent, $end $end-percent);
  background: -ms-linear-gradient(left, $start $start-percent, $end $end-percent);
  background: linear-gradient(to right, $start $start-percent, $end $end-percent);
}

@mixin standard-body-link() {
  a,
  a:visited {
    color: $globe !important;
  }

  a:hover,
  a:focus {
    color: $leconte !important;
  }
}

@mixin serif-body-rendering() {
  font-family: $serif;
  font-size: 21px;
  line-height: 1.58;
  word-break: break-word;
  letter-spacing: -0.003em;
}

@mixin background-2x($path, $ext: "png", $w: auto, $h: auto, $pos: left top, $repeat: no-repeat) {
  $at1x_path: "#{$path}.#{$ext}";
  $at2x_path: "#{$path}@2x.#{$ext}";

  background-image: url("#{$at1x_path}");
  background-size: $w $h;
  background-position: $pos;
  background-repeat: $repeat;

  @media all and (-webkit-min-device-pixel-ratio: 1.5), all and (-o-min-device-pixel-ratio: 3/2) {
    background-image: url("#{$at2x_path}");
  }
}

@mixin blur($radius) {
  -webkit-filter: blur($radius+px);
  -ms-filter: blur($radius+px);
  filter: url("data:image/svg+xml;utf8,<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><filter id=\"blur\"><feGaussianBlur stdDeviation=\"#{$radius}\" /></filter></svg>#blur");
  filter: progid:dximagetransform.microsoft.blur(Strength=$radius);
}

// Named Breakpoints are phone, tablet-portrait, tablet-landscape-desktop, large-desktop, non-retina, retina
@mixin do-the-responds($media) {
  /* Mobile Devices for Mice */
  @if $media == xxs {
    @media (max-width: $xxs-upr) { @content; }
  }

  /* Landscape phones and down */
  @if $media == xs {
    @media (max-width: $xs-upr) { @content; }
  }

  /* Landscape phone to portrait tablet */
  @if $media == sm {
    @media (min-width: $sm-lwr) and (max-width: $sm-upr) { @content; }
  }

  /* Portrait tablet to landscape and desktop */
  @if $media == md {
    @media (min-width: $md-lwr) and (max-width: $md-upr) { @content; }
  }

  /* desktop and large desktop */
  @if $media == lg {
    @media (min-width: $lg-lwr) and (max-width: $lg-upr) { @content; }
  }

  @if $media == xl {
    @media (min-width: $xl-lwr) and (max-width: $xl-upr) { @content; }
  }
}

@mixin respond($media...) {
  @each $mediatype in $media {
    @include do-the-responds($mediatype) { @content; }
  }
}

@mixin respondtoCustom($media...) {
  @each $mediatype in $media {
    @media (max-width: 700px) {
      @content;
    }
  }
}

@mixin aspect-ratio($width, $height) {
  position: relative;

  &::before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

@mixin gradient-vertical($start, $start-percent, $end, $end-percent) {
  background: -moz-linear-gradient(top, $start $start-percent, $end $end-percent);
  background: -webkit-gradient(linear, top, bottom, color-stop($start-percent, $start), color-stop($end-percent, $end));
  background: -webkit-linear-gradient(top, $start $start-percent, $end $end-percent);
  background: -o-linear-gradient(top, $start $start-percent, $end $end-percent);
  background: -ms-linear-gradient(top, $start $start-percent, $end $end-percent);
  background: linear-gradient(to bottom, $start $start-percent, $end $end-percent);
}

@mixin gradient-horizontal($start, $start-percent, $end, $end-percent) {
  background: -moz-linear-gradient(left, $start $start-percent, $end $end-percent);
  background: -webkit-gradient(linear, left, right, color-stop($start-percent, $start), color-stop($end-percent, $end));
  background: -webkit-linear-gradient(left, $start $start-percent, $end $end-percent);
  background: -o-linear-gradient(left, $start $start-percent, $end $end-percent);
  background: -ms-linear-gradient(left, $start $start-percent, $end $end-percent);
  background: linear-gradient(to right, $start $start-percent, $end $end-percent);
}
